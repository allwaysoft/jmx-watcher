<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">
<mapper namespace="com.focustech.jmx.DAO.JmxThreadDAO">
<resultMap id="threadConfigParameter" type="com.focustech.jmx.po.ThreadDumpConfig">
	<result property="recId" column="rec_id" jdbcType="BIGINT" />
	<result property="hostId" column="host_id" jdbcType="INTEGER" />
	<result property="appId" column="app_id" jdbcType="INTEGER" />
	<result property="repeatInterval" column="dump_repeat_interval" jdbcType="INTEGER" />
	<result property="dumpRepeatCount" column="dump_repeat_count" jdbcType="INTEGER" />
	<result property="cpuSampleInterval" column="cpu_repeat_count" jdbcType="INTEGER" />
	<result property="addTime" column="add_time" jdbcType="TIMESTAMP" />
	<result property="updateTime" column="update_time" jdbcType="TIMESTAMP" />
</resultMap>

<resultMap id="threadStatisticsInfo" type="com.focustech.jmx.po.JmxThread">
	<result property="recId" column="rec_id" jdbcType="INTEGER" />
	<result property="hostId" column="host_id" jdbcType="INTEGER" />
	<result property="appId" column="app_id" jdbcType="INTEGER" />
	<result property="activeCount" column="thread_active_count" jdbcType="INTEGER" />
	<result property="idleCount" column="thread_idle_count" jdbcType="INTEGER" />
	<result property="curTotalCount" column="thread_count" jdbcType="INTEGER" />
	<result property="abnormalFlg" column="abnormal_flg" jdbcType="INTEGER" />
	<result property="addTime" column="add_time" jdbcType="TIMESTAMP" />
</resultMap>

<resultMap id="threadTotalStatisticsInfo" type="com.focustech.jmx.pojo.JmxThreadPOJO">
	<result property="hostId" column="host_id" jdbcType="INTEGER" />
	<result property="appId" column="app_id" jdbcType="INTEGER" />
	<result property="activeCount" column="thread_active_count" jdbcType="INTEGER" />
	<result column="app_name" property="appName" jdbcType="VARCHAR"/>
	<result column="host_ip" property="hostIp" jdbcType="VARCHAR"/>
</resultMap>

<resultMap id="threadDumpInfo" type="com.focustech.jmx.po.JmxThreadDumpInfo">
	<result property="recId" column="rec_id" jdbcType="BIGINT" />
	<result property="hostId" column="host_id" jdbcType="INTEGER" />
	<result property="appId" column="app_id" jdbcType="INTEGER" />
	<result property="filePath" column="file_path" jdbcType="VARCHAR" />
	<result property="reasonType" column="reason_type" jdbcType="VARCHAR" />
	<result property="addTime" column="add_time" jdbcType="TIMESTAMP" />
</resultMap>

<insert id="saveInfo" parameterType="com.focustech.jmx.po.JmxThreadDumpInfo" useGeneratedKeys="true" keyProperty="recId">
	insert into jmx_thread
	<trim prefix="(" suffix=")" suffixOverrides=",">
		<if test="hostId !=null">
			host_id,
		</if>
		<if test="appId !=null">
			app_id,
		</if>
		<if test="activeCount !=null">
			thread_active_count,
		</if>
		<if test="idleCount !=null">
			thread_idle_count,
		</if>
		<if test="curTotalCount !=null">
			thread_count,
		</if>
		<if test="abnormalFlg !=null">
			abnormal_flg,
		</if>
		<if test="addTime !=null">
			add_time,
		</if>
	</trim>
	<trim prefix="values (" suffix=")" suffixOverrides=",">
		<if test="hostId !=null">
			#{hostId,jdbcType=INTEGER},
		</if>
		<if test="appId !=null">
			#{appId,jdbcType=INTEGER},
		</if>
		<if test="activeCount !=null">
			#{activeCount,jdbcType=INTEGER},
		</if>
		<if test="idleCount !=null">
			#{idleCount,jdbcType=INTEGER},
		</if>
		<if test="curTotalCount !=null">
			#{curTotalCount,jdbcType=INTEGER},
		</if>
		<if test="abnormalFlg !=null">
			#{abnormalFlg,jdbcType=INTEGER},
		</if>
		<if test="addTime !=null">
			 #{addTime,jdbcType=TIMESTAMP},
		</if>
	</trim>
</insert>

<insert id="saveDumpInfo" parameterType="com.focustech.jmx.po.JmxThreadDumpInfo">
	insert into jmx_dump(host_id,app_id,file_path,reason_type,add_time)
	values (#{hostId,jdbcType=INTEGER},#{appId,jdbcType=INTEGER},#{filePath,jdbcType=VARCHAR},#{reasonType,jdbcType=VARCHAR},#{addTime,jdbcType=TIMESTAMP})
</insert>

<select id="getRepeatInterval" resultType="java.lang.String" parameterType="java.lang.Integer">
	SELECT param_value FROM jmx_parameter a WHERE a.param_type='param' AND a.param_name='dump' AND a.param_key='thread_dump_repeat_interval' AND app_id=#{appId}
</select>

<select id="getRepeatCount" resultType="java.lang.String" parameterType="java.lang.Integer">
	SELECT param_value FROM jmx_parameter a WHERE a.param_type='param' AND a.param_name='dump' AND a.param_key='thread_dump_repeat_count' and app_id=#{appId}
</select>

<select id="getThreadStatisticsInfoByDate" resultMap="threadStatisticsInfo">
	SELECT * from jmx_thread where host_id = #{hostId,jdbcType=INTEGER} and app_id = #{appId,jdbcType=INTEGER}
		and add_time between #{from,jdbcType=TIMESTAMP} and #{to,jdbcType=TIMESTAMP}
		order by add_time
</select>

<select id="getLastestThreadInfo" resultMap="threadStatisticsInfo">
	SELECT * from jmx_thread where host_id = #{hostId,jdbcType=INTEGER}
		and app_id = #{appId,jdbcType=INTEGER}
		order by add_time desc
		limit 0,1
</select>

<select id="getAllDumpInfos" resultMap="threadDumpInfo">
	SELECT rec_id,host_id,app_id,file_path,reason_type,add_time
	FROM jmx_dump ORDER BY add_time DESC
</select>

<sql id="thread_dump_info_condition">
	<if test="dumpType !=null and dumpType !='' ">
			and reason_type = #{dumpType,jdbcType=VARCHAR}
	</if>
	<if test="startDate !=null">
			and add_time >= #{startDate,jdbcType=TIMESTAMP}
	</if>
	<if test="hostId !=null and hostId !=0 ">
		    and host_id=#{hostId,jdbcType=INTEGER}
	</if>
	<if test="appId !=null and appId !=0 ">
		    and app_id=#{appId,jdbcType=INTEGER}
	</if>
	<if test="endDate !=null">
			and add_time <![CDATA[<= #{endDate,jdbcType=TIMESTAMP}]]>
	</if>
</sql>

<sql id="thread_abnormaldump_info_condition">
	<if test="startDate !=null">
			and add_time >= #{startDate,jdbcType=TIMESTAMP}
	</if>
	<if test="hostId !=null and hostId !=0 ">
		    and host_id=#{hostId,jdbcType=INTEGER}
	</if>
	<if test="appId !=null and appId !=0 ">
		    and app_id=#{appId,jdbcType=INTEGER}
	</if>
	<if test="endDate !=null">
			and add_time <![CDATA[<= #{endDate,jdbcType=TIMESTAMP}]]>
	</if>
</sql>

<select id="getDumpInfos" resultMap="threadDumpInfo" parameterType="map">
	SELECT rec_id,host_id,app_id,file_path,reason_type,add_time
	FROM jmx_dump where 1=1
    <include refid="thread_dump_info_condition"/>
	ORDER BY add_time DESC limit #{start},#{max}
</select>

<select id="getAppAbnormalDumpInfos" resultMap="threadDumpInfo" parameterType="map">
	SELECT rec_id,host_id,app_id,file_path,reason_type,add_time
	FROM jmx_dump where reason_type != 'normal_dump'
    <include refid="thread_abnormaldump_info_condition"/>
	ORDER BY add_time DESC limit #{start},#{end}
</select>

<select id="getDumpInfosCount" resultType="int">
	SELECT COUNT(rec_id)
	FROM jmx_dump where 1=1
    <include refid="thread_dump_info_condition"/>
</select>

<select id="getLastestdayDumpCount" resultType="Map">
	SELECT date_format(add_time,'%Y-%m-%d')  day,COUNT(1) num FROM jmx_dump where date_format(add_time,'%Y-%m-%d')
	between date_format(#{from},'%Y-%m-%d') and date_format(#{to},'%Y-%m-%d') and host_id = #{hostId,jdbcType=INTEGER}
	and app_id = #{appId,jdbcType=INTEGER}
	group by date_format(add_time,'%Y-%m-%d') order by date_format(add_time,'%Y-%m-%d')
</select>

<select id="getAllServerNowThreadActiveCount" resultMap="threadTotalStatisticsInfo">
	SELECT a.thread_active_count,a.host_id,c.host_ip,c.app_id,d.job_name app_name FROM jmx_thread a ,(SELECT MAX(rec_id) rec_id
		FROM jmx_thread t WHERE t.thread_active_count != -1 GROUP BY t.app_id,t.host_id) b,jmx_server c,jmx_task_schedule_job d WHERE a.rec_id = b.rec_id
        AND a.host_id = c.host_id AND a.app_id = c.app_id AND a.app_id = d.app_id AND c.jmx_status = 1 ORDER BY c.app_id
</select>

<select id="countSizeByReasonAndRange" resultType="java.lang.Integer">
	select count(*) from jmx_dump WHERE
	reason_type=#{reason}
	and app_id=#{appId}
	and host_id=#{hostId}
	and add_time BETWEEN (NOW()-INTERVAL #{hours} HOUR) AND NOW()
</select>
<!--获取某一个应用server非正常dump原因的所有数量-->
<select id="countSizeByAbnormalReasonAndRange" resultType="java.lang.Integer">
	select count(*) from jmx_dump WHERE
	reason_type != 'normal_dump'
	<if test="appId !=null and appId !=0 ">
	  and app_id=#{appId}
	</if>
	<if test="hostId !=null and hostId !=0 ">
	and host_id=#{hostId}
	</if>
	and add_time BETWEEN (NOW()-INTERVAL #{hours} HOUR) AND NOW()
</select>
<update id="updateThreadInfo" parameterType="com.focustech.jmx.po.JmxThread">
	update jmx_thread
	<set>
		<if test="hostId !=null">
			host_id=#{hostId,jdbcType=INTEGER},
		</if>
		<if test="appId !=null">
			app_id=#{appId,jdbcType=INTEGER},
		</if>
		<if test="activeCount !=null">
			thread_active_count=#{activeCount,jdbcType=INTEGER},
		</if>
		<if test="idleCount !=null">
			thread_idle_count=#{idleCount,jdbcType=INTEGER},
		</if>
		<if test="curTotalCount !=null">
			thread_count=#{curTotalCount,jdbcType=INTEGER},
		</if>
		<if test="abnormalFlg !=null">
			abnormal_flg=#{abnormalFlg,jdbcType=INTEGER},
		</if>
		<if test="addTime !=null">
			add_time=#{addTime,jdbcType=TIMESTAMP},
		</if>
	</set>
	where rec_id=#{recId,jdbcType=INTEGER}
</update>
<select id="getThreadInfoByPrimaryKeyAndDomain"  resultMap="threadStatisticsInfo">
	select abnormal_flg
	from jmx_thread
	where rec_id=#{recId,jdbcType=INTEGER}
</select>

</mapper>